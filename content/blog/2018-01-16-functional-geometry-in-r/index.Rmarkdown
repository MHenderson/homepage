---
title: Functional Geometry in R
author: Matthew Henderson
date: '2018-01-16'
slug: functional-geometry-in-r
categories:
  - functional-programming
tags:
  - r-packages
  - generative-art
subtitle: ''
excerpt: 'This post introduces funcgeo, an R package for functional geometry, by recreating Square Limit by M. Escher following the approach of Henderson (1982).'
draft: yes
series: ~
layout: single
references:
- id: Henderson:1982:FG
  author:
    - family: Henderson
      given: Peter
  citation-key: Henderson:1982:FG
  collection-title: LFP '82
  container-title: Proceedings of the 1982 ACM symposium on LISP and functional programming
  DOI: 10.1145/800068.802148
  event-place: Pittsburgh, Pennsylvania, USA
  ISBN: 0-89791-082-6
  issued:
    - year: 1982
  number-of-pages: '9'
  page: 179–187
  publisher: ACM
  publisher-place: Pittsburgh, Pennsylvania, USA
  title: Functional geometry
  type: paper-conference
  URL: http://doi.acm.org/10.1145/800068.802148
- id: Henderson:2002:FG
  abstract: >-
    An algebra of pictures is described that is sufficiently powerful to denote
    the structure of a well-known Escher woodcut, Square Limit. A decomposition
    of the picture that is reasonably faithful to Escher's original design is
    given. This illustrates how a suitably chosen algebraic specification can be
    both a clear description and a practical implementation method. It also
    allows us to address some of the criteria that make a good algebraic
    description.
  author:
    - family: Henderson
      given: Peter
  citation-key: Henderson:2002:FG
  container-title: Higher-Order and Symbolic Computation
  DOI: 10.1023/A:1022986521797
  ISSN: 1573-0557
  issue: '4'
  issued:
    - year: 2002
      month: 12
      day: 1
  page: 349–365
  title: Functional geometry
  type: article-journal
  URL: https://doi.org/10.1023/A:1022986521797
  volume: '15'
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(
     comment = "#>",
    collapse = TRUE,
     warning = FALSE,
     message = FALSE,
       error = FALSE,
        echo = FALSE,
  fig.height = 3,
   fig.width = 3
)
```

This post introduces **funcgeo**, an R package for functional geometry, by recreating Square Limit by M. Escher (Fig. 1) following the approach of Henderson (1982).

```{r squarelimit, fig.cap="Squarelimit"}
knitr::include_graphics("img/squarelimit-1.png")
```

Peter Henderson describes Functional Geometry in two papers: Henderson (1982) and Henderson (2002).
In those papers he shows how to define a language of pictures using basic concepts of functional programming.

[**funcgeo**](https://mhenderson.github.io/funcgeo/) implements a picture language like the one described in Henderson (1982).

To install **funcgeo** use `install_gitlab` from the **remotes** package.

``` r
remotes::install_gitlab("MHenderson1/funcgeo")
```

The next section introduces the basic fish pictures used to construct Square Limit.

After that, subsequent sections, the fish are combined into more complex pictures where the lines of the fish are connected at picture boundaries.
The penultimate step before constructing the complete Square Limit picture is to combine the complex pictures into the sides and corners of Square Limit.

# Fish

The fish from Henderson (1982) are available in **funcgeo** as package data: `fish_p`, `fish_q`, `fish_r` and
`fish_s`.
All fish have class `picture` and **funcgeo** implements a `plot` method for `picture`s.

``` r
library(funcgeo)

plot(fish_p)
```

```{r fish_p, fig.cap="Fish P"}
knitr::include_graphics("img/p-1.png")
```

``` r
plot(fish_q)
```

```{r fish_q, fig.cap="Fish Q"}
knitr::include_graphics("img/q-1.png")
```

# Combining fish

Picture operations from Henderson (1982) like `rot`, `flip` and `cycle` are implemented in **funcgeo**.

For example, the `quartet` operation described in Henderson (1982) is used to combine the four fish into `t`, one of the building blocks of Square Limit.

``` r
t <- quartet(fish_p, fish_q, fish_r, fish_s)

plot(t)
```

```{r fish_t, fig.cap="t"}
knitr::include_graphics("img/t-1.png")
```

Similarly, `cycle` and `rot` functions are used to create `u` from `fish_q`.

``` r
u <- cycle(rot(fish_q))

plot(u)
```

```{r fish_u, fig.cap="u"}
knitr::include_graphics("img/u-1.png")
```

# Sides

`quartet` is also required for building `side1`, one of the more complex pieces of Square Limit.
`side1` also requires the `rot` operation and `nil` empty picture.

``` r
side1 <- quartet(nil, nil, rot(t), t)

plot(side1)
```

```{r side1, fig.cap="Side 1"}
knitr::include_graphics("img/side1-1.png")
```

`side2` is created as a `quartet` involving several pictures, including `side1`.

``` r
side2 <- quartet(side1, side1, rot(t), t)

plot(side2)
```

```{r side2, fig.cap="Side 2"}
knitr::include_graphics("img/side2-1.png")
```

# Corners

The goal of this section is to reproduce `corner` from Henderson (1982).
Square Limit is created by calling the `cycle` operation on `corner`.
However, creating `corner` requires first creating `corner2`, which itself is based on `corner1` which is a `quartet` of three null pictures and `u`.

``` r
corner1 <- quartet(nil, nil, nil, u)

plot(corner1)
```

```{r corner1, fig.cap="Corner 1"}
knitr::include_graphics("img/corner1-1.png")
```

`corner2` is also a `quartet` made from `corner1` `side1` and `u`.

``` r
corner2 <- quartet(corner1, side1, rot(side1), u)

plot(corner2)
```

```{r corner2, fig.cap="Corner 2"}
knitr::include_graphics("img/corner2-1.png")
```

`nonet` is a `\(3 \times 3\)` equivalent of `quartet` and is used with `corner2` `side2`, `u`, `t`, and `fish_q` to create `corner`, the only picture we need to create Square Limit.

``` r
corner <- nonet(
  corner2, side2, side2,
  rot(side2), u, rot(t),
  rot(side2), rot(t), rot(fish_q)
)

plot(corner)
```

```{r corner, fig.cap="Corner"}
knitr::include_graphics("img/corner-1.png")
```

# Square Limit

Square Limit now is just `cycle` with `corner`.

``` r
squarelimit <- cycle(corner)

plot(squarelimit)
```

```{r squarelimit2, fig.cap="Square Limit"}
knitr::include_graphics("img/squarelimit2-1.png")
```
