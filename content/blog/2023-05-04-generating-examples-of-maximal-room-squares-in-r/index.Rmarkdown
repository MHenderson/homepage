---
title: Generating Examples of Maximal Room Squares in R
author: Matthew Henderson
date: '2023-05-04'
slug: [maximal-room-squares]
categories:
  - combinatorics
tags: [room-squares]
subtitle: ''
excerpt: ""
draft: false
series: ~
layout: single
references:
- id: meszkaMaximalPartialRoom2021
  abstract: A partial Room square is maximal if no further pair of elements can be
    placed into any unoccupied cell without violating the conditions that define a
    partial Room square. This article is concerned with determining the spectrum of
    volumes of maximal partial Room squares of order n where the volume is the number
    of occupied cells and the order n is even.
  accessed:
  - year: 2021
    month: 7
    day: 21
  author:
  - family: Meszka
    given: Mariusz
  - family: Rosa
    given: Alexander
  container-title: Journal of Combinatorial Designs
  DOI: 10.1002/jcd.21777
  ISSN: 1520-6610
  issue: '7'
  issued:
  - year: 2021
  language: en
  note: '_eprint: https://onlinelibrary.wiley.com/doi/pdf/10.1002/jcd.21777'
  page: 482-501
  source: Wiley Online Library
  title: Maximal partial Room squares
  type: article-journal
  URL: https://onlinelibrary.wiley.com/doi/abs/10.1002/jcd.21777
  volume: '29'
- id: hendersonMHendersonMaximalroomsquares2023
  abstract: >-
    <strong>Full Changelog</strong>:
    https://github.com/MHenderson/maximal-room-squares/commits/0.1.0
  accessed:
    - year: 2023
      month: 5
      day: 4
  author:
    - family: Henderson
      given: Matthew
  citation-key: hendersonMHendersonMaximalroomsquares2023
  DOI: 10.5281/ZENODO.7895562
  issued:
    - year: 2023
      month: 5
      day: 4
  license: Open Access
  publisher: Zenodo
  source: DOI.org (Datacite)
  title: 'MHenderson/maximal-room-squares: 0.1.0'
  title-short: MHenderson/maximal-room-squares
  type: software
  URL: https://zenodo.org/record/7895562
  version: 0.1.0
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
        echo = TRUE,
     message = FALSE,
     warning = FALSE,
     comment = "#>",
    collapse = TRUE
)
```

A **Room square** of order $n$ and side $n − 1$ on an $n$‐element set $S$ is an
$n - 1 \times n - 1$ array filled with $n$ different symbols in such a way that:

1. Each cell of the array is either empty or contains an unordered pair from the set of symbols
2. Each symbol occurs exactly once in each row and column of the array
3. Every unordered pair of symbols occurs in exactly one cell of the array.

A **partial Room square** of order $n$ and side $n − 1$ on an $n$‐element set $S$ is
an $n - 1 \times n - 1$ array satisfying property (1) above, and also

4. every symbol of $S$ occurs at most once in each row and at most once in each column of the array 
5. every unordered pair of symbols of $S$ occurs in at most one cell of the array.

A partial Room square is **maximal** if no further pair of elements of $S$ can be placed into any unoccupied cell of $F$ without violating the conditions (1), (4), (5).

# Greedy maximal Room squares

There are at least two deterministic methods for generating a maximal partial Room square, as described in
@meszkaMaximalPartialRoom2021.

The first method involves iterating through the cells in a specific order and placing the next available pair of elements into the next empty cell, ensuring that the pair satisfies the conditions of being a partial Room square. This process is known as `greedy1`.

The second method involves iterating through the set of all unordered pairs and placing the next available pair into the first cell that satisfies the conditions of being a partial Room square without violating any constraints. This process is known as `greedy2`.

Both `greedy1` and `greedy2` have been implemented in R and are available at
[the Github repository](https://github.com/MHenderson/maximal-room-squares)
(@hendersonMHendersonMaximalroomsquares2023)
accompanying this blog post.

## greedy1

The algorithm `greedy1` visits each cell in a predetermined order and places the first available pair of symbols into the cell, provided that doing so does not violate the conditions of creating a partial Room square.

```r
R <- greedy1(6)
plot_room_square_labs(R)
```

![](greedy1_example_plot-1.png)

In this plot, the colors indicate the sequence in which the cells were filled. Specifically, lighter colors represent cells that were filled earlier in the process, while darker colors represent cells that were filled later.

```r
is_maximal_proom(R)
#> [1] TRUE
```

Here are a few more examples of maximal partial Room squares created
by `greedy1`.

![](greedy1_examples_1-1.png)<!-- -->

![](greedy1_examples_2-1.png)<!-- -->

## greedy2

The algorithm `greedy2` iterates through all pairs of symbols in a predetermined order and places the next available pair into the first empty cell, provided that doing so does not violate the conditions of creating a partial Room square.

```r
R <- greedy2(6)
plot_room_square_labs(R)
```

![](greedy2_example_plot-1.png)

```r
is_maximal_proom(R)
#> [1] TRUE
```

Here are a few more examples of maximal partial Room squares created
by `greedy2`.

![](greedy2_examples_1-1.png)

![](greedy2_examples_2-1.png)

## References
